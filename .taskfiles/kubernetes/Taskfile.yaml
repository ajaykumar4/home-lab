---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  KUBECONFORM_SCRIPT: "{{.SCRIPTS_DIR}}/kubeconform.sh"

tasks:

  apply-ks:
    desc: Apply a Argo Kustomization resource for a cluster
    summary: |-
      PATH: Path to the Argo Kustomization resource from the apps base dir (required, e.g. network/echo-server)
      NS: Namespace the Argo Kustomization exists in (default: argo-system)
    cmd: >
      kubectl apply --server-side -f {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml
    requires:
      vars: [PATH]
    vars:
      NS: '{{.NS | default "argo-system"}}'
      KS:
        sh: argocd app get {{base .PATH}} 2>&1
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml

  reconcile:
    desc: Force update Argo to pull in changes from your Git repository
    cmd: argocd app sync cluster --namespace argo-system
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}

  kubeconform:
    desc: Validate Kubernetes manifests with kubeconform
    cmd: bash {{.KUBECONFORM_SCRIPT}} {{.KUBERNETES_DIR}}
    preconditions:
      - msg: Missing kubeconform script
        sh: test -f {{.KUBECONFORM_SCRIPT}}

  resources:
    desc: Gather common resources in your cluster, useful when asking for support
    cmds:
      - for: { var: RESOURCE }
        cmd: kubectl get {{.ITEM}} {{.CLI_ARGS | default "-A"}}
    vars:
      RESOURCE: >-
        nodes
        gitrepositories
        kustomizations
        helmrepositories
        helmreleases
        certificates
        certificaterequests
        ingresses
        pods
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
