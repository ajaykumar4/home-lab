controllers:
  gatus:
    annotations:
      reloader.stakater.com/auto: "true"
    initContainers:
      init-config:
        image:
          repository: ghcr.io/home-operations/k8s-sidecar
          tag: 1.30.7
        env:
          FOLDER: /config
          LABEL: gatus.io/enabled
          NAMESPACE: ALL
          RESOURCE: both
          UNIQUE_FILENAMES: true
          METHOD: WATCH
        restartPolicy: Always
        resources:
          requests:
            cpu: 10m
          limits:
            memory: 128Mi
    containers:
      app:
        image:
          repository: ghcr.io/twin/gatus
          tag: v5.20.0
        env:
          TZ: Europe/Dublin
          GATUS_CONFIG_PATH: /config
          GATUS_DELAY_START_SECONDS: 5
          WEB_PORT: &port 80
          - name: &name CF_DOMAIN
            valueFrom:
              secretKeyRef:
                name: gatus-secret
                key: *name
        probes:
          liveness: &probes
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /health
                port: *port
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness: *probes
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 256Mi
defaultPodOptions:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
service:
  app:
    ports:
      http:
        port: *port
serviceMonitor:
  app:
    endpoints:
      - port: http
route:
  app:
    hostnames:
      - "{{ .Release.Name }}.$(CF_DOMAIN)"
      - status.$(CF_DOMAIN)
    parentRefs:
      - name: external
        namespace: kube-system
        sectionName: https
rbac:
  roles:
    gatus:
      type: ClusterRole
      rules:
        - apiGroups: [""]
          resources: ["configmaps", "secrets"]
          verbs: ["get", "watch", "list"]
  bindings:
    gatus:
      type: ClusterRoleBinding
      roleRef:
        identifier: gatus
      subjects:
        - identifier: gatus
serviceAccount:
  gatus: {}
persistence:
  config:
    existingClaim: gatus
  config-file:
    type: configMap
    name: gatus-configmap
    globalMounts:
      - path: /config/config.yaml
        subPath: config.yaml
        readOnly: true
